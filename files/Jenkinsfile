def github_cred_id = 'Github-senkodima'
def github_url = 'git@github.com:senkodima/DevOps-Project.git'

def dockerhub_cred_id = 'dockerhub-senkodima'
def dockerhub_repo_name = 'senkodima'

def app_name = 'flask-app'

def git_commit
def imageName
def docker_image

def Branch = 'main'

def get_build_status(status) {
  if (status == 'RUN') {
    return "[üïê] Start running üò¥"
  }
  if (status == 'SUCCESS') {
    return "[‚úÖ] Build successfully üòä"
  } 
  if (status == 'FAILURE') {
    return "[‚ùå] Failed to build üò±\n" + 
           "Failing in '${env.FAILURE_STAGE}' stage"
  }
  if (status == 'ABORTED') {
    return "[‚ùé] Build aborted üòµ"
  }
}

def telegram_notification(TOKEN, CHAT_ID, build_status) {
    script {
        sh (label: 'Telegram notification', script: """ 
curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
-d chat_id=${CHAT_ID} -d parse_mode=HTML -d text="\
<b>JOB:</b> ${env.JOB_NAME}\n\
<b>STATUS:</b> ${build_status}\n\
<b>BRANCH:</b> $Branch\n\
<b>BUILD_ID:</b> <a href=\\"${env.BUILD_URL}\\">${env.BUILD_ID}</a>\n\
<b>DURATION:</b> ${currentBuild.durationString}"
        """)
    }
}

pipeline {
    agent none
    triggers { 
        cron('* * * * *')
    }
    stages {
        stage('Checkout SCM') {
            agent { label 'agent_ubuntu_prod' }
            steps {
                checkout scm
                script { echo "This stage - '$STAGE_NAME'" }
            }
        }
        post {
            always {
                script {
                    echo 'Post always ...'
                }
            }
            success {
                echo 'Post success ...'
                // cleanWs() // Clean after build
            }
            aborted {
                echo 'Post aborted ...'
                // cleanWs() // Clean
            }
            failure {
                echo 'Post failure ...'
                script { env.FAILURE_STAGE = "$STAGE_NAME" }
                // cleanWs() // Clean
            }
        }
    }
    
}
