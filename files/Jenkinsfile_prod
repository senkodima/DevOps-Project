def dockerhub_cred_id = 'dockerhub-senkodima'
def dockerhub_repo_name = 'senkodima'

def app_name = 'flask-app'

def git_commit
def image_name
def docker_image

def get_build_status(status) {
  if (status == 'SUCCESS') {
    return "[‚úÖ] Build successfully üòä"
  } 
  if (status == 'FAILURE') {
    return "[‚ùå] Failed to build üò±\n" + 
           "Failing in '${env.FAILURE_STAGE}' stage"
  }
  if (status == 'ABORTED') {
    return "[‚ùé] Build aborted üòµ"
  }
}

def post_telegram_notification(TOKEN, CHAT_ID, build_status) {
    script {
        sh (label: "Telegram notification", script: """ 
curl -s -X POST https://api.telegram.org/bot${TOKEN}/sendMessage \
-d chat_id=${CHAT_ID} -d parse_mode=HTML -d text="\
<b>JOB:</b> ${env.JOB_NAME}\n\
<b>STATUS:</b> ${build_status}\n\
<b>BRANCH:</b> ${env.GIT_BRANCH}\n\
<b>BUILD_ID:</b> <a href=\\"${env.BUILD_URL}\\">${env.BUILD_ID}</a>\n\
<b>DURATION:</b> ${currentBuild.durationString}"
        """)
    }
}

pipeline {
    agent { label "agent_ubuntu_prod" }
    triggers { 
        pollSCM "* * * * *"
    }
    stages {
        stage('Docker pull') {
            steps {
                script {
                    echo "This stage - '$STAGE_NAME'"
                    image_name = "$dockerhub_repo_name/$app_name:latest"
                    docker.withRegistry('', "$dockerhub_cred_id") {
                        docker_image = docker.image("$image_name")
                        docker_image.pull()
                    }
                }
            }
            post { failure { script { env.FAILURE_STAGE = "$STAGE_NAME" } } }
        }
        stage('Run container') {
            steps {
                script {
                    echo "This stage - '$STAGE_NAME'"
                    try {
                        sh (label: "Remove app container", 
                            script: "docker rm -f ${app_name}")
                    } catch (err) {
                        echo "No such container $app_name"
                    }
                    sh (label: "Run container", 
                        script: "docker run -dit --name $app_name -p 80:5000 --restart unless-stopped $image_name")
                }
            }
            post { failure { script { env.FAILURE_STAGE = "$STAGE_NAME" } } }
        }
        stage('Remove unnecessary local images') {
            steps {
                script {
                    echo "This stage - '$STAGE_NAME'"
                    try {
                        sh (label: "Remove unnecessary local images", 
                            script: "docker image prune -a -f")
                    } catch (err) {
                        echo "Images still in use"
                    }
                }
            }
            post { failure { script { env.FAILURE_STAGE = "$STAGE_NAME" } } }
        }
    }
    post {
        always {
            script {
                echo 'Post always ...'
                withCredentials([string(credentialsId: 'telegram_bot_token', variable: 'TOKEN'), 
                                string(credentialsId: 'telegram_chat_id', variable: 'CHAT_ID')]) {
                    def build_status = get_build_status(currentBuild.currentResult)
                    post_telegram_notification(TOKEN, CHAT_ID, build_status)
                }
                cleanWs() // Clean after build
            }
        }
        success {
            script {
                echo 'Post success ...'
                // cleanWs() // Clean after build
            }
        }
        aborted {
            script {
                echo 'Post aborted ...'
                // cleanWs() // Clean
            }
        }
        failure {
            script {
                echo 'Post failure ...'
                // cleanWs() // Clean
            }
        }
    }
}
